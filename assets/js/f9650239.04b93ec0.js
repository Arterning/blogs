"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9058],{224:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>y});var n=r(2374);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(r),m=o,y=u["".concat(a,".").concat(m)]||u[m]||p[m]||c;return r?n.createElement(y,s(s({ref:t},d),{},{components:r})):n.createElement(y,s({ref:t},d))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=r.length,s=new Array(c);s[0]=m;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<c;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5727:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var n=r(9963),o=(r(2374),r(224));const c={},s=void 0,i={unversionedId:"notes/\u6280\u672f\u6808/docker/docker \u73af\u5883\u90e8\u7f72",id:"notes/\u6280\u672f\u6808/docker/docker \u73af\u5883\u90e8\u7f72",title:"docker \u73af\u5883\u90e8\u7f72",description:"cp docker/* /usr/bin/",source:"@site/docs/notes/\u6280\u672f\u6808/docker/docker \u73af\u5883\u90e8\u7f72.md",sourceDirName:"notes/\u6280\u672f\u6808/docker",slug:"/notes/\u6280\u672f\u6808/docker/docker \u73af\u5883\u90e8\u7f72",permalink:"/blogs/docs/notes/\u6280\u672f\u6808/docker/docker \u73af\u5883\u90e8\u7f72",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/notes/\u6280\u672f\u6808/docker/docker \u73af\u5883\u90e8\u7f72.md",tags:[],version:"current",frontMatter:{},sidebar:"notes",previous:{title:"deploy \u5e38\u7528\u5bb9\u5668",permalink:"/blogs/docs/notes/\u6280\u672f\u6808/docker/deploy \u5e38\u7528\u5bb9\u5668"},next:{title:"upload docker hub",permalink:"/blogs/docs/notes/\u6280\u672f\u6808/docker/upload docker hub"}},a={},l=[],d={toc:l},u="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"cp docker/* /usr/bin/\ncat follow to /etc/systemd/system/docker.service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n[Unit]\nDescription=Docker Application Container Engine\nDocumentation=https://docs.docker.com\nAfter=network-online.target firewalld.service\nWants=network-online.target\n[Service]\nType=notify\n# the default is not to use systemd for cgroups because the delegate issues still\n# exists and systemd currently does not support the cgroup feature set required\n# for containers run by docker\nExecStart=/usr/bin/dockerd\nExecReload=/bin/kill -s HUP $MAINPID\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=infinity\nLimitNPROC=infinity\nLimitCORE=infinity\n# Uncomment TasksMax if your systemd version supports it.\n# Only systemd 226 and above support this version.\n#TasksMax=infinity\nTimeoutStartSec=0\n# set delegate yes so that systemd does not reset the cgroups of docker containers\nDelegate=yes\n# kill only the docker process, not all processes in the cgroup\nKillMode=process\n# restart the docker process if it exits prematurely\nRestart=on-failure\nStartLimitBurst=3\nStartLimitInterval=60s\n \n[Install]\nWantedBy=multi-user.target\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"chmod +x /etc/systemd/system/docker.service\nsystemctl daemon-reload\nsystemctl start docker\nsystemctl enable docker.service\nsystemctl status docker\ndocker -v\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mv docker-compose-linux-x86_64 /usr/local/bin/\nmv /usr/local/bin/docker-compose-linux-x86_64 /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n")))}p.isMDXComponent=!0}}]);