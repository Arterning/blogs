"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4750],{8015:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(757);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),m=o,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return t?r.createElement(h,a(a({ref:n},p),{},{components:t})):r.createElement(h,a({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2187:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=t(1227),o=(t(757),t(8015));const s={},a=void 0,i={unversionedId:"notes/\u6280\u672f\u6808/Laravel/Create Post resource CRUD via Laravel",id:"notes/\u6280\u672f\u6808/Laravel/Create Post resource CRUD via Laravel",title:"Create Post resource CRUD via Laravel",description:"",source:"@site/docs/notes/\u6280\u672f\u6808/Laravel/Create Post resource CRUD via Laravel.md",sourceDirName:"notes/\u6280\u672f\u6808/Laravel",slug:"/notes/\u6280\u672f\u6808/Laravel/Create Post resource CRUD via Laravel",permalink:"/blogs/docs/notes/\u6280\u672f\u6808/Laravel/Create Post resource CRUD via Laravel",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/notes/\u6280\u672f\u6808/Laravel/Create Post resource CRUD via Laravel.md",tags:[],version:"current",frontMatter:{},sidebar:"notes",previous:{title:"Controller",permalink:"/blogs/docs/notes/\u6280\u672f\u6808/Laravel/Controller"},next:{title:"Homestead",permalink:"/blogs/docs/notes/\u6280\u672f\u6808/Laravel/Homestead"}},l={},u=[],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"php artisan make:model -mrc Post\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up(): void\n    {\n        Schema::create('posts', function (Blueprint $table) {\n            $table->id();\n            $table->timestamps();\n            $table->foreignId('user_id')->constrained()->cascadeOnDelete();\n            $table->string('title');\n            $table->string('content');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     */\n    public function down(): void\n    {\n        Schema::dropIfExists('posts');\n    }\n};\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"php artisan migrate\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"Route::resource('posts', PostController::class)\n    ->only(['index', 'store', 'edit', 'update', 'destroy'])\n    ->middleware(['auth', 'verified']);\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    /**\n     * Display a listing of the resource.\n     */\n    public function index()\n    {\n        return view('posts.index', [\n            'posts' => Post::with('user')->latest()->get(),\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     */\n    public function create()\n    {\n        //\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     */\n    public function store(Request $request)\n    {\n        $validated = $request->validate([\n            'title' => 'required|string|max:25',\n            'content' => 'required|string|max:255',\n        ]);\n \n        $request->user()->posts()->create($validated);\n \n        return redirect(route('posts.index'));\n    }\n\n    /**\n     * Display the specified resource.\n     */\n    public function show(Post $post)\n    {\n        //\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     */\n    public function edit(Post $post)\n    {\n        $this->authorize('update', $post);\n \n        return view('posts.edit', [\n            'post' => $post,\n        ]);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     */\n    public function update(Request $request, Post $post)\n    {\n        $this->authorize('update', $post);\n \n        $validated = $request->validate([\n            'title' => 'required|string|max:25',\n            'content' => 'required|string|max:255',\n        ]);\n \n        $post->update($validated);\n \n        return redirect(route('post.index'));\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     */\n    public function destroy(Post $post)\n    {\n        $this->authorize('delete', $post);\n \n        $chirp->delete();\n \n        return redirect(route('posts.index'));\n    }\n}\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:policy PostPolicy --model=Post\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Policies;\n\nuse App\\Models\\Post;\nuse App\\Models\\User;\nuse Illuminate\\Auth\\Access\\Response;\n\nclass PostPolicy\n{\n    /**\n     * Determine whether the user can view any models.\n     */\n    public function viewAny(User $user): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can view the model.\n     */\n    public function view(User $user, Post $post): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can create models.\n     */\n    public function create(User $user): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can update the model.\n     */\n    public function update(User $user, Post $post): bool\n    {\n        return $post->user()->is($user);\n    }\n\n    /**\n     * Determine whether the user can delete the model.\n     */\n    public function delete(User $user, Post $post): bool\n    {\n        return $this->update($user, $post);\n    }\n\n    /**\n     * Determine whether the user can restore the model.\n     */\n    public function restore(User $user, Post $post): bool\n    {\n        //\n    }\n\n    /**\n     * Determine whether the user can permanently delete the model.\n     */\n    public function forceDelete(User $user, Post $post): bool\n    {\n        //\n    }\n}\n\n")))}d.isMDXComponent=!0}}]);